---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-conf
  namespace: kube-system
data:
  traefik.toml: |
    # traefik.toml
    defaultEntryPoints = ["http","https"]
    [entryPoints]
      [entryPoints.http]
      address = ":80"
      #[entryPoints.http.redirect]
      #entryPoint = "https"
      #[entryPoints.http.auth.basic]   # if you need login/pass to access service
      #users = ["test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/"]   # user=test, pass=test
      #[entryPoints.https.auth.basic]
      #users = ["test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/"]   # user=test, pass=test
      [entryPoints.https]
      address = ":443"
      [entryPoints.https.tls]
    [acme]
    email = "gregbkr@outlook.com"
    storageFile = "/acme/acme.json"
    entryPoint = "https"
    onDemand = true
    onHostRule = true
    #caServer = "https://acme-staging.api.letsencrypt.org/directory"   # comment this line for production
    [[acme.domains]]
    main = "satoshi.tech"
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
  labels:
    k8s-app: traefik-ingress-lb
    #kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: traefik-ingress-lb
        name: traefik-ingress-lb
    spec:
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: traefik-conf
        - name: acme
          hostPath:
            path: /srv/configs/acme
      containers:
        - image: containous/traefik
          name: traefik-ingress-lb
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: "/config"
              name: "config"
            - mountPath: "/acme"
              name: "acme"
          ports:
            - containerPort: 80
              hostPort: 80
            - containerPort: 443
              hostPort: 443
            - containerPort: 8080
          args:
            - --configfile=/config/traefik.toml
            - --web
            - --kubernetes
            #- --logLevel=DEBUG
      nodeSelector:
        role: loadbalancer
